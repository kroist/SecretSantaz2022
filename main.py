import telebot
import numpy as np
import json

ADMIN_ID = 1234567
TOKEN = "TOKEN"

bot = telebot.TeleBot(TOKEN)

gift_assignments = {}

# try to read the list of registered users from the file
try:
  with open('registered_users.json', 'r') as f:
    registered_users = json.load(f)
except FileNotFoundError:
  # if the file doesn't exist, create an empty list
  registered_users = []

@bot.message_handler(commands=['start'])
def handle_start(message):
  text = """
üëã–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Secret Santaz 2022 edition.
Secret Santaz - —ç—Ç–æ —Ä–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–æ–µ –∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç —Å–≤–æ–µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã!

–ö–∞–∫ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ? –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:

1. –ó–∞–ø–∏—à–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ —Ç–∞–π–Ω—ã—Ö –°–∞–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π 
/register
2. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –±–æ—Ç —Ç–µ–±–µ –Ω–µ —Å–æ–æ–±—â–∏—Ç, –¥–ª—è –∫–æ–≥–æ —Ç—ã –±—É–¥–µ—à—å —Ç–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –≤ 2022 –≥–æ–¥—É.
3. –ü–æ–¥–∞—Ä–∏ –ø–æ–¥–∞—Ä–æ–∫! –ò –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç —Ç–∞–π–Ω–Ω–æ–≥–æ –°–∞–Ω—Ç—ã!

–í —ç—Ç–æ–º –≥–æ–¥—É –ì–ª–∞–≤–Ω—ã–π –≠–ª—å—Ñ –∑–∞–±–ª—É–¥–∏–ª—Å—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ, –ø–æ–º–æ–≥–∏ –µ–º—É –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å–∞–Ω—Ç—ã –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç Real Santa
/maze
"""
  bot.send_message(message.chat.id, text, parse_mode='MARKDOWN')


@bot.message_handler(commands=['register'])
def handle_register(message):
  tup = {'id': message.from_user.id, 'first_name': message.from_user.first_name, 'username': message.from_user.username}
  if tup in registered_users:
    bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
    return
  registered_users.append(tup)

  # write the updated list of registered users to a file
  with open('registered_users.json', 'w') as f:
    json.dump(registered_users, f, indent=1)

  bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –í—Å–∫–æ—Ä–µ —Ç—ã —É–∑–Ω–∞–µ—à—å, –¥–ª—è –∫–æ–≥–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É —Ç—ã –°–µ–∫—Ä–µ—Ç–Ω—ã–π –°–∞–Ω—Ç–∞!")


def is_derangement(permutation):
  # check if any element appears in its original position
  for i in range(len(permutation)):
    if permutation[i] == i:
      return False
  return True

@bot.message_handler(commands=['assign'])
def handle_assign(message):
  if message.from_user.id != ADMIN_ID:
    return
  if len(registered_users) < 2:
    bot.send_message(message.chat.id, "–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.")
    return

  # create a derangement permutation of the registered users
  permutation = np.random.permutation(registered_users)
  while not is_derangement(permutation):
    permutation = np.random.permutation(registered_users)


  # iterate through the permutation and assign each user a gift recipient
  for i in range(len(permutation)):
    gift_assignments[permutation[i]['id']] = permutation[(i + 1) % len(permutation)]

  # send a message to each user with their gift recipient
  for user in registered_users:
    recipient = gift_assignments[user['id']]

    bot.send_message(
      user['id'],
      "–í —ç—Ç–æ–º—É –≥–æ–¥—É —Ç—ã —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–Ω—Ç–∞ –¥–ª—è: @{} ({})".format(recipient['username'], recipient['first_name'])
    )


# define the maze as a 2D array of characters
maze = [
  ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
  ['#', '.', '.', 'F', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
  ['#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#'],
  ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'],
  ['#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'],
  ['#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#'],
  ['#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#'],
  ['#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#'],
  ['#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
  ['#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
  ['#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#'],
  ['#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#'],
  ['#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'],
  ['#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#'],
  ['#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#'],
  ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
  ['#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
  ['#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
  ['#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#'],
  ['#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#'],
  ['#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#'],
  ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
  ['#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#'],
  ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#'],
  ['#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#'],
  ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
  ['#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
  ['#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#'],
  ['#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#'],
  ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#'],
  ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#'],
  ['#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
  ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#'],
  ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
  ['#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#'],
  ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
  ['#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'],
  ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
  ['#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'],
  ['#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', 'F', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#'],
  ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
]

# create a dictionary mapping characters to emojis for display
emoji_map = {
  '#': 'üß±',  # wall
  '.': 'üå´',  # air
  'P': '‚õÑÔ∏è',  # player
  'F': 'üéÖ'   # finish
}

# define the initial position of the player
# player_pos = [1, 1]

# try to read the list of registered users from the file
try:
  with open('player_poses.json', 'r') as f:
    player_poses = json.load(f)
except FileNotFoundError:
  # if the file doesn't exist, create an empty list
  player_poses = {}

# try to read the list of registered users from the file
try:
  with open('won_players.json', 'r') as f:
    won_players = json.load(f)
except FileNotFoundError:
  # if the file doesn't exist, create an empty list
  won_players = []


# define the commands for moving the player
commands = {
  'left': [-1, 0],
  'right': [1, 0],
  'up': [0, -1],
  'down': [0, 1]
}

def get_view(player_pos, maze):

  # create an empty view
  view = ""


  # get the indices of the top-left and bottom-right corners of the view
  top_left = [max(player_pos[0]-3, 0), max(player_pos[1]-3, 0)]
  bottom_right = [min(player_pos[0]+3, len(maze[0])-1), min(player_pos[1]+3, len(maze)-1)]

  # iterate through the rows of the maze
  for y in range(top_left[1], bottom_right[1]+1):
    # iterate through the columns of the maze
    for x in range(top_left[0], bottom_right[0]+1):
      # add the corresponding emoji for the current maze cell to the view
      if x == player_pos[0] and y == player_pos[1]:
        view += emoji_map['P']
      else:
        view += emoji_map[maze[y][x]]
    # add a newline character after each row
    view += "\n"

  return view

def generate_buttons():
  # create a list of buttons for the inline keyboard
  buttons = []
  for command in commands:
    # create a button for each movement command
    # use the corresponding emoji for the command in the button text
    if command == 'left':
      button = telebot.types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=command)
    elif command == 'right':
      button = telebot.types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=command)
    elif command == 'up':
      button = telebot.types.InlineKeyboardButton(text='‚¨ÜÔ∏è', callback_data=command)
    elif command == 'down':
      button = telebot.types.InlineKeyboardButton(text='‚¨áÔ∏è', callback_data=command)
    buttons.append(button)

  # create an inline keyboard with the buttons
  keyboard = telebot.types.InlineKeyboardMarkup()
  keyboard.add(*buttons)

  return keyboard

@bot.message_handler(commands=['maze'])
def handle_view(message):
  keyboard = generate_buttons()
  # get the current view
  from_id = message.chat.id
  if str(from_id) in player_poses:
    player_pos = player_poses[str(from_id)]
  else:
    player_pos = [1, 1]
  if maze[player_pos[1]][player_pos[0]] == 'F':
    text = 'üéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅ\n' + '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –ª–∞–±–∏—Ä–∏–Ω—Ç –∏ –ø–æ–ª—É—á–∏—à—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –°–∞–Ω—Ç—ã!' + '\n' + 'üéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅ'
    bot.send_message(from_id, text)
    return

  view = get_view(player_pos, maze)
  # send the view and the inline keyboard to the user
  bot.send_message(from_id, view, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(callback_query):
  # get the command from the callback data
  command = callback_query.data
  # get the corresponding movement
  movement = commands[command]

  from_id = callback_query.from_user.id
  if str(from_id) in player_poses:
    player_pos = player_poses[str(from_id)]
  else:
    player_pos = [1, 1]

  if maze[player_pos[1]][player_pos[0]] == 'F':
    text = 'üéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅ\n' + '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –ª–∞–±–∏—Ä–∏–Ω—Ç –∏ –ø–æ–ª—É—á–∏—à—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –°–∞–Ω—Ç—ã!' + '\n' + 'üéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅ'
    bot.send_message(from_id, text)
    return

  # update the player's position
  player_pos[0] += movement[0]
  player_pos[1] += movement[1]

  keyboard = generate_buttons()

  # check if the new position is a wall
  if maze[player_pos[1]][player_pos[0]] == '#':
    # if it is a wall, move the player back to their original position
    player_pos[0] -= movement[0]
    player_pos[1] -= movement[1]
    bot.answer_callback_query(callback_query.id, "–ù–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
  elif maze[player_pos[1]][player_pos[0]] == 'F':
    text = 'üéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅ\n' + '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –ª–∞–±–∏—Ä–∏–Ω—Ç –∏ –ø–æ–ª—É—á–∏—à—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –°–∞–Ω—Ç—ã!' + '\n' + 'üéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅüéÅ'
    won_players.append(str(from_id))
    with open('won_players.json', 'w') as f:
      json.dump(won_players, f, indent=1)
    bot.edit_message_text(text=text, chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=None)
  else:
    # if it is not a wall, update the maze and send the updated view to the user
    view = get_view(player_pos, maze)
    bot.edit_message_text(text=view, chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=keyboard)
  player_poses[str(from_id)] = player_pos
  with open('player_poses.json', 'w') as f:
    json.dump(player_poses, f, indent=1)



bot.polling()

bot.polling()
